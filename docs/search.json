[
  {
    "objectID": "schedule/01-foundations.html",
    "href": "schedule/01-foundations.html",
    "title": "R foundations",
    "section": "",
    "text": "Schedule for Term 1 (subject to change).\nClick on the topic to be taken to the page with its slides and resources (will be updated throughout the term).\n\n\n\nWeek\nDate (2022)\nTopic\n\n\n\n\nWeek 2\nOctober 10th\nIntro to R and RStudio\n\n\nWeek 3\nOctober 17th\nData Wrangling\n\n\nWeek 4\nOctober 24th\nBreak/online clinic\n\n\nWeek 5\nOctober 31st\nProgramming in R\n\n\nWeek 6\nNovember 7th\nSimulation and Optimisation\n\n\nWeek 7\nNovember 14th\nBreak/online clinic\n\n\nWeek 8\nNovember 21st\nGraphics\n\n\nWeek 9\nNovember 28th\nQuarto reporting and presentations\n\n\nWeek 10\nDecember 5th\nBreak/online clinic"
  },
  {
    "objectID": "schedule/02-advanced.html",
    "href": "schedule/02-advanced.html",
    "title": "Advanced R",
    "section": "",
    "text": "Schedule for Term 2 (subject to change).\nClick on the topic to be taken to the page with its slides and resources (will be updated throughout the term).\n\n\n\nWeek\nDate (2023)\nTopic\n\n\n\n\nWeek 2\nJanuary 16th\nGitHub\n\n\nWeek 3\nJanuary 23rd\nFunctions\n\n\nWeek 4\nJanuary 30th\nBreak/online clinic\n\n\nWeek 5\nFebruary 6th\nMemory/parallel\n\n\nWeek 6\nFebruary 13th\nProfiling\n\n\nWeek 7\nFebruary 20th\nBreak/online clinic\n\n\nWeek 8\nFebruary 27th\nC++ and Rcpp\n\n\nWeek 9\nMarch 6th\nClasses and Methods\n\n\nWeek 10\nMarch 13th\nBreak/online clinic"
  },
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "content",
    "section": "",
    "text": "Please use the links in the sidebar to navigate to the page for each session."
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Getting set up",
    "section": "",
    "text": "Please ensure that you have the latest versions of R and RStudio installed prior to the first session. Currently, that’s R-4.2.1 and RStudio-2022.07.2.\nWe also strongly recommend you install the development tools to avoid potential issues installing packages.\n\nInstalling R\nDownload the pre-compiled binary for your OS from https://cloud.r-project.org/ and install. More specifically:\nFor Windows\nClick “Download R for Windows”, then “base”, then “Download R-4.2.1 for Windows”. This will download an .exe file; once downloaded, open to start the installation.\nFor Mac\nClick “Download R for macOS”, then “R-4.2.1.pkg” (the first option) to download the installer for Macs with Intel chips or “R-4.2.1-arm64.pkg” (the second option) to download the installer for Macs with Apple Silicon chips. Run the installer to complete installation.\nFor Linux\nClick “Download R for Linux”. Instructions on installing are given for Debian, Fedora, Redhat, Suse and Ubuntu distributions. Where there is a choice, install both r-base and r-base-dev.\n\n\nInstalling R Studio Desktop (Open Source Edition)\nDownloads are available from https://www.rstudio.com/products/rstudio/download/#download\nFor Windows with no admin rights\nDownload the .zip source archive under “Zip/Tarballs”. Extract the files to a folder where you have write access, e.g. C:\\Users\\username\\RStudio. In this folder, open the bin directory and find the RStudio program: it is named rstudio.exe, but the file extension will typically be hidden, so look for rstudio. Right-click this executable to create a desktop shortcut. Double-click the executable or use the shortcut to open.\nFor all other operating systems\nDownload the relevant installer for your OS listed under “Installers for Supported Platforms”. Run the installer to complete installation.\n\n\nDevelopment Tools\nSome additional tools may be required to compile R packages from source.\nFor Windows with no admin rights\nDownload the latest (recommended) Rtools installer, Rtools.exe, from https://cran.r-project.org/bin/windows/Rtools/. Run the installer keeping the default settings.\nFor Windows with admin rights\nDownload the latest Rtools installer, Rtools.exe, from https://cran.r-project.org/bin/windows/Rtools/. Run the installer making the following selections: keep the default settings for the installation location and components to install; check the box to add rtools to the system PATH.\nFor Mac\nInstall XCode. Either:\n\nDownload and install XCode from the Mac AppStore: http://itunes.apple.com/us/app/xcode/id497799835?mt=12\nWithin XCode go to Preferences : Downloads and install the Command Line Tools\n\nOr for a smaller download size:\n\nRegister as an Apple Developer (free) here: https://developer.apple.com/programs/register/\nDownload the Command Line Tools for XCode appropriate for the version of OS X you are running from here: https://developer.apple.com/downloads/\n\nFor Linux\nIf you installed r-base-dev, when installing R, you should have all you need to build packages from source. Otherwise return to the instructions for installing R for your distribution and follow the instructions there to install the additional tools.\n\n\nTerms 2 and 3\nThis page will be updated with prerequisites for terms 2 and 3 in due course."
  },
  {
    "objectID": "content/01-foundations/01-intro.html",
    "href": "content/01-foundations/01-intro.html",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-foundations/01-intro.html#resources",
    "href": "content/01-foundations/01-intro.html#resources",
    "title": "Introduction to R and RStudio",
    "section": "Resources",
    "text": "Resources\n\nR and RStudio\n\nRStudio IDE cheatsheet (11th one down)\nhttps://www.rstudio.com/resources/cheatsheets/\nBeginner resourses from the RStudio Education team\nhttps://education.rstudio.com/learn/beginner/\nIntroduction to R and RStudio from the Carpentries\nhttps://carpentries-incubator.github.io/r-tidyverse-4-datasets/01-project-introduction.html\n\n\n\nPackages\n\nTidyverse\nhttps://www.tidyverse.org\npalmerpenguins\nhttps://allisonhorst.github.io/palmerpenguins/index.html"
  },
  {
    "objectID": "content/01-foundations/04-sim-optim.html",
    "href": "content/01-foundations/04-sim-optim.html",
    "title": "Simulation and Optimisation",
    "section": "",
    "text": "This page and the slides for this session are still under development"
  },
  {
    "objectID": "content/01-foundations/04-sim-optim.html#slides",
    "href": "content/01-foundations/04-sim-optim.html#slides",
    "title": "Simulation and Optimisation",
    "section": "Slides",
    "text": "Slides\nHere’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-foundations/04-sim-optim.html#resources",
    "href": "content/01-foundations/04-sim-optim.html#resources",
    "title": "Simulation and Optimisation",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nTITLE\n\n\n\n\nPackages"
  },
  {
    "objectID": "content/01-foundations/00-template.html",
    "href": "content/01-foundations/00-template.html",
    "title": "TITLE",
    "section": "",
    "text": "This page and the slides for this session are still under development"
  },
  {
    "objectID": "content/01-foundations/00-template.html#todo",
    "href": "content/01-foundations/00-template.html#todo",
    "title": "TITLE",
    "section": "TODO",
    "text": "TODO\n\nLink to this page in schedule\nLink to this page in _quarto.yml\nUpdate TITLE\nCreate folder for slides\nUpdate link to slides in new window\nUpdate link to slides in iframe\nUpdate title of slides in iframe\nFill in resources"
  },
  {
    "objectID": "content/01-foundations/00-template.html#slides",
    "href": "content/01-foundations/00-template.html#slides",
    "title": "TITLE",
    "section": "Slides",
    "text": "Slides\nHere’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-foundations/00-template.html#resources",
    "href": "content/01-foundations/00-template.html#resources",
    "title": "TITLE",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nTITLE\n\n\n\n\nPackages"
  },
  {
    "objectID": "content/01-foundations/02-data-wrangling.html",
    "href": "content/01-foundations/02-data-wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-foundations/02-data-wrangling.html#resources",
    "href": "content/01-foundations/02-data-wrangling.html#resources",
    "title": "Data Wrangling",
    "section": "Resources",
    "text": "Resources\n\nR and RStudio\n\nRStudio cheatsheets\nR for data science book\n\n\n\nPackages\n\ndplyr\nhttps://dplyr.tidyverse.org\nforcats\nhttps://forcats.tidyverse.org\nferriswheels\nhttps://github.com/EmilHvitfeldt/ferriswheels\nhere\nhttps://here.r-lib.org"
  },
  {
    "objectID": "content/01-foundations/03-programming.html",
    "href": "content/01-foundations/03-programming.html",
    "title": "Programming in R",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-foundations/03-programming.html#resources",
    "href": "content/01-foundations/03-programming.html#resources",
    "title": "Programming in R",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nEfficient Programming, from Efficient R by Colin Gillespie and Robin Lovelace\nhttps://csgillespie.github.io/efficientR/programming.html\nChapters on functions and iteration, from R for Data Science by Hadley Wickham and Garrett Grolemund\nhttps://r4ds.had.co.nz/index.html\nhttps://r4ds.had.co.nz/functions.html\nhttps://r4ds.had.co.nz/iteration.html"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R training",
    "section": "",
    "text": "Welcome to the  training course!\nThis course is aimed at first year PhD students in the Department of Statistics at the University of Warwick, alongside 4th year undergraduates and MSc students."
  },
  {
    "objectID": "index.html#syllabus-overview",
    "href": "index.html#syllabus-overview",
    "title": "R training",
    "section": "Syllabus overview",
    "text": "Syllabus overview\n\nTerm 1: R Foundations, to cover the information and skills necessary to enable successful completion of the APTS programme and equip you to use R for standard analysis and reporting.\nTerm 2: Advanced R, to develop your R programming skills and equip you to write custom code for simulations, new statistical methods, etc.\nTerm 3: R package development, to equip you to share code with others, following good research software engineering practices.\n\nAll slides and further resources can be accessed from the content page and also via the schedule. Material will be added as the year progresses. There is one page per session."
  },
  {
    "objectID": "index.html#session-details",
    "href": "index.html#session-details",
    "title": "R training",
    "section": "Session details",
    "text": "Session details\n   Most Mondays in term time\n   10:00-11:30\n   Microsoft Teams (invitations will be sent to eligible participants)\n   See the full schedule."
  },
  {
    "objectID": "index.html#instructor-details",
    "href": "index.html#instructor-details",
    "title": "R training",
    "section": "Instructor details",
    "text": "Instructor details\n   Ella Kaye\n   Ella.M.Kaye@warwick.ac.uk"
  },
  {
    "objectID": "index.html#prerequistes",
    "href": "index.html#prerequistes",
    "title": "R training",
    "section": "Prerequistes",
    "text": "Prerequistes\nPlease see the prerequisites page for details on getting set up in advance of the first session."
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#overview",
    "href": "slides/01-foundations/00-template/index.html#overview",
    "title": "Simulation and Optimisation",
    "section": "Overview",
    "text": "Overview\n\nNumerical precision\nSimulation\nOptimisation"
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#resources",
    "href": "slides/01-foundations/00-template/index.html#resources",
    "title": "Simulation and Optimisation",
    "section": "Resources",
    "text": "Resources\nThis material is reproduced in large part from the APTS 2013/14 resources by Ruth Ripley:\n\nhttps://portal.stats.ox.ac.uk/userdata/ruth/APTS2013/Rcourse5.pdf"
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#license",
    "href": "slides/01-foundations/00-template/index.html#license",
    "title": "Simulation and Optimisation",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/01-foundations/04-sim-optim/index.html#overview",
    "href": "slides/01-foundations/04-sim-optim/index.html#overview",
    "title": "TITLE",
    "section": "Overview",
    "text": "Overview\n\nWhat we’re covering"
  },
  {
    "objectID": "slides/01-foundations/04-sim-optim/index.html#resources",
    "href": "slides/01-foundations/04-sim-optim/index.html#resources",
    "title": "TITLE",
    "section": "Resources",
    "text": "Resources\nMaterial inspired by and remixed from:"
  },
  {
    "objectID": "slides/01-foundations/04-sim-optim/index.html#license",
    "href": "slides/01-foundations/04-sim-optim/index.html#license",
    "title": "TITLE",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#overview",
    "href": "slides/01-foundations/01-intro/index.html#overview",
    "title": "Introduction to R and RStudio",
    "section": "Overview",
    "text": "Overview\n\nWhy use R?\nUse RStudio to write and run R programmes\nCreate and start an R project\nUse install.packages() to install packages\nHow to get help in R\nSee examples of data wrangling and visualisation"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#what-can-r-do",
    "href": "slides/01-foundations/01-intro/index.html#what-can-r-do",
    "title": "Introduction to R and RStudio",
    "section": "What can R do?",
    "text": "What can R do?\n\nData import\nData management and wrangling\nExploratory data analysis\nStatistical modelling\nAdvanced statistics\nMachine learning\nData visualisation\nReports, articles, dashboards, presentations, websites\nIntegrates well with other languages\nPackages: share your code and use others"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#the-r-ecosystem",
    "href": "slides/01-foundations/01-intro/index.html#the-r-ecosystem",
    "title": "Introduction to R and RStudio",
    "section": "The R Ecosystem",
    "text": "The R Ecosystem\nBase R\n\n\nbase\n\nCreate R objects\nSummaries\nMaths functions\n\n\nrecommended\n\nStatistics\nGraphics\nExample data"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#the-r-ecosystem-1",
    "href": "slides/01-foundations/01-intro/index.html#the-r-ecosystem-1",
    "title": "Introduction to R and RStudio",
    "section": "The R Ecosystem",
    "text": "The R Ecosystem\nContributed packages\n\n\nCRAN\n\nOfficial R repository\nhttps://cran.r-project.org\nnearly 19000 packages\n\n\nBioconductor\n\nBioinformatics packages\nhttps://www.bioconductor.org\n~2100 packages\n\n\n\nGitHub\n\nPackages in development\nGitHub-only packages"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#the-tidyverse",
    "href": "slides/01-foundations/01-intro/index.html#the-tidyverse",
    "title": "Introduction to R and RStudio",
    "section": "The tidyverse",
    "text": "The tidyverse\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar and data structures.\n\nFrom https://education.rstudio.com/blog/2020/07/teaching-the-tidyverse-in-2020-part-1-getting-started/"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#palmerpenguins",
    "href": "slides/01-foundations/01-intro/index.html#palmerpenguins",
    "title": "Introduction to R and RStudio",
    "section": "palmerpenguins",
    "text": "palmerpenguins\n\npalmerpenguins is a dataset package, designed to be a great example for data exploration and visualisation.\nIt contains measurement data for 344 penguins, from three different species, collected from three islands in the Palmer Archipelago, Antarctica.\n\n\nPenguin artwork by Allison Horst https://allisonhorst.github.io/palmerpenguins/articles/art.html"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#the-r-community",
    "href": "slides/01-foundations/01-intro/index.html#the-r-community",
    "title": "Introduction to R and RStudio",
    "section": "The R community",
    "text": "The R community\nAnother reason to love R is the community around it.\nIt prides itself on being friendly, diverse, helpful, and supportive.\n\nR user groups, especially Warwick RUG\nRLadies, especially RLadies Coventry\nRStudio Community\nR for Data Science\n#RStats and #TidyTuesday on twitter\nRainbowR (LGBTQ+)\nMiR (minorities in R)"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#at-first",
    "href": "slides/01-foundations/01-intro/index.html#at-first",
    "title": "Introduction to R and RStudio",
    "section": "At first",
    "text": "At first"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#with-script",
    "href": "slides/01-foundations/01-intro/index.html#with-script",
    "title": "Introduction to R and RStudio",
    "section": "With script",
    "text": "With script"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#best-practice-use-r-projects",
    "href": "slides/01-foundations/01-intro/index.html#best-practice-use-r-projects",
    "title": "Introduction to R and RStudio",
    "section": "Best practice: use R projects",
    "text": "Best practice: use R projects\nAn RStudio project is a contect for working on a specific project\n\nKeeps files well-organised\nAutomatically sets working directory to project root\nHas separate workspace and command history\nWorks well with version control via git or svn"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#getting-started-with-projects",
    "href": "slides/01-foundations/01-intro/index.html#getting-started-with-projects",
    "title": "Introduction to R and RStudio",
    "section": "Getting started with projects",
    "text": "Getting started with projects\n\nCreate a project from a new or existing directory via the file menu or new project button\nSwitch project, or open a different project in a new RStudio instance via the project menu"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#rstudio-project-demo",
    "href": "slides/01-foundations/01-intro/index.html#rstudio-project-demo",
    "title": "Introduction to R and RStudio",
    "section": "RStudio project demo",
    "text": "RStudio project demo\n\nCreate R-Foundations project\nCreate first script"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#using-the-console",
    "href": "slides/01-foundations/01-intro/index.html#using-the-console",
    "title": "Introduction to R and RStudio",
    "section": "Using the console",
    "text": "Using the console\n\nFor things that only need doing once, e.g. installing packages\nFor doing things you don’t need to track, e.g. requesting help files\nTo quickly explore new ideas before adding them to a script"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#using-the-console-shortcuts",
    "href": "slides/01-foundations/01-intro/index.html#using-the-console-shortcuts",
    "title": "Introduction to R and RStudio",
    "section": "Using the console: shortcuts",
    "text": "Using the console: shortcuts\nRStudio provides a few shortcuts to help write code in the R console\n\n↑/↓ go back/forward through history one command at a time\nCtrl/⌘ + ↑ review recent history and select command\nTab view possible completions for part-written expression\n\nCode completion (using Tab) is also provided in the source editor"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#using-the-console-demo",
    "href": "slides/01-foundations/01-intro/index.html#using-the-console-demo",
    "title": "Introduction to R and RStudio",
    "section": "Using the console: demo",
    "text": "Using the console: demo\n1 + 1\n?log\nlog(10)\nexp(-4 * 4 / 2) / sqrt(2 * pi)\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\")"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#using-scripts",
    "href": "slides/01-foundations/01-intro/index.html#using-scripts",
    "title": "Introduction to R and RStudio",
    "section": "Using scripts",
    "text": "Using scripts\nText files saved with an .R suffix are recognised as R code\nCode can be sent directly from a script to the console as follows:\n\nCtrl/⌘ + ↵ or  run current line\n\nRun multiple lines by selecting first\n\nCtrl/⌘ + Shift + ↵ or \n\nRun the script from start to finish."
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#why-r-scripts",
    "href": "slides/01-foundations/01-intro/index.html#why-r-scripts",
    "title": "Introduction to R and RStudio",
    "section": "Why R scripts",
    "text": "Why R scripts\nWriting an R script for an analysis has several advantages over a graphical user interface (GUI)\n\nIt provides a record of the exact approach used in an analysis\nIt enables the analysis to be easily reproduced and modified\nIt allows greater control"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#good-practice-for-r-scripts",
    "href": "slides/01-foundations/01-intro/index.html#good-practice-for-r-scripts",
    "title": "Introduction to R and RStudio",
    "section": "Good practice for R Scripts",
    "text": "Good practice for R Scripts\nOrganising your R script well will help you and others understand and use it.\n\nAdd comment or two at start to describe purpose of script\nLoad required data and packages at the start\nAvoid hard-coding: define variables such as file paths early on\nGive functions and variable meaningful names\nuse ### or #--- to separate sections (in RStudio Code > Insert Section)"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#r-script-demo",
    "href": "slides/01-foundations/01-intro/index.html#r-script-demo",
    "title": "Introduction to R and RStudio",
    "section": "R script demo",
    "text": "R script demo\n### load libraries\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n### Inspect data\nView(penguins)\nglimpse(penguins)\nhead(penguins)\nsummary(penguins)"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#installing-packages",
    "href": "slides/01-foundations/01-intro/index.html#installing-packages",
    "title": "Introduction to R and RStudio",
    "section": "Installing packages",
    "text": "Installing packages\nIn console\n\nInstall a package with install.packages(\"package_name\")\n\nWatch out for the plural!\n\nInstall multiple packages with install.packages(c(\"package1\", \"package2\"))\n\nThe c() function creates a vector\n\nOr use install button in packages pane:"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#loading-packages",
    "href": "slides/01-foundations/01-intro/index.html#loading-packages",
    "title": "Introduction to R and RStudio",
    "section": "Loading packages",
    "text": "Loading packages\nIn script\n\nLoad packages with library(package_name)"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#within-r---help-with-functions",
    "href": "slides/01-foundations/01-intro/index.html#within-r---help-with-functions",
    "title": "Introduction to R and RStudio",
    "section": "Within R - Help with functions",
    "text": "Within R - Help with functions\n\n# help with a specific function\nhelp(function_name)\n?function_name\n\n# quick reminder of the function arguments\narg(function_name)\n\n# see an example\nexample(function_name)\n\n# see the source code\n## in console\nfunction_name\n## in View pane (easier to read, syntax highlighting)\nView(function_name)"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#within-r---help.search",
    "href": "slides/01-foundations/01-intro/index.html#within-r---help.search",
    "title": "Introduction to R and RStudio",
    "section": "Within R - help.search",
    "text": "Within R - help.search\n\n# when ?function_name fails (e.g. don't have library loaded)\nhelp.search(\"function_name\") # note quotation marks\n??function_name\n\n# for when you can't quite remember the function name\n??something_like_function_name\n\n# R help start page\nhelp.start()\n## note that using the RStudio Help home button gives even more resources"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#within-r---help-with-package",
    "href": "slides/01-foundations/01-intro/index.html#within-r---help-with-package",
    "title": "Introduction to R and RStudio",
    "section": "Within R - Help with package",
    "text": "Within R - Help with package\n\n# `help`\nhelp(package = \"package_name\")\n# Help panel in RStudio will give links to all documentation\n# and help pages for that package\n\n# find/browse vignettes for installed (or specific) packages\nbrowseVignettes()\nbrowseVignettes(\"package_name\")\n\n# use auto-completion in RStudio to see what functions \n# are in a package\n?package::\n\ndplyr demo\nRStudio Help home demo"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#your-turn",
    "href": "slides/01-foundations/01-intro/index.html#your-turn",
    "title": "Introduction to R and RStudio",
    "section": "Your turn",
    "text": "Your turn\n\nCreate an R project called “R-foundations”\nInstall the packages palmerpenguins and tidyverse\nFind the help page for the penguins dataset\nFind the help page for the filter function in the dplyr package\nExperiment typing commands into the console or in an R script.\n\nlink to slides"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#the-data",
    "href": "slides/01-foundations/01-intro/index.html#the-data",
    "title": "Introduction to R and RStudio",
    "section": "The data",
    "text": "The data\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#notes",
    "href": "slides/01-foundations/01-intro/index.html#notes",
    "title": "Introduction to R and RStudio",
    "section": "Notes",
    "text": "Notes\nMaterial inspired by and remixed from:\n\nhttps://www.heatherturner.net/teaching/zero-to-hero/#1\nhttps://ellakaye.github.io/Rladies-Coventry-getting-help-in-R/getting_help_in_R.html#1\nhttps://portal.stats.ox.ac.uk/userdata/ruth/APTS2013/Rcourse1.pdf\nhttps://carpentries-incubator.github.io/r-tidyverse-4-datasets/"
  },
  {
    "objectID": "slides/01-foundations/01-intro/index.html#license",
    "href": "slides/01-foundations/01-intro/index.html#license",
    "title": "Introduction to R and RStudio",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#overview",
    "href": "slides/01-foundations/02-data-wrangling/index.html#overview",
    "title": "Data Types, Structures and Wrangling",
    "section": "Overview",
    "text": "Overview\n\nData types\nData structures\nData import and wrangling"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#assigning-in-r",
    "href": "slides/01-foundations/02-data-wrangling/index.html#assigning-in-r",
    "title": "Data Types, Structures and Wrangling",
    "section": "Assigning in R",
    "text": "Assigning in R\nThe assignment operator in R is <-\nWe can create objects in R and assign them names:\n\nx <- 1 + 3\n\nThen we can inspect the objects we have created:\n\nx\n\n[1] 4\n\n\nAnd use them further:\n\nx + 5\n\n[1] 9"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#naming-objects",
    "href": "slides/01-foundations/02-data-wrangling/index.html#naming-objects",
    "title": "Data Types, Structures and Wrangling",
    "section": "Naming objects",
    "text": "Naming objects\n\nforbiddengoodbad\n\n\nObject names cannot:\n\nstart with a number\ncontain certain characters like , - ?\ncontain a space (unless in ``, but that is not best practice)\n\n\n\n\nmeaningful yet concise\n\n\nday_one\nday_1\n\nconsistent\n\n\ni_use_snake_case\nother.people.use.periods\nevenOthersUseCamelCase\nsnake_case is preferred in R, especially in the tidyverse.\n\n\n\nnot meaningful\n\n\nfoo\nbar\n\nunnecessarily long or difficult to read\n\n\nfirst_day_of_month\ndayone\n\ninconsistent"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#rstudio-demo",
    "href": "slides/01-foundations/02-data-wrangling/index.html#rstudio-demo",
    "title": "Data Types, Structures and Wrangling",
    "section": "RStudio demo",
    "text": "RStudio demo\nAssigning and environment pane.\nThere is an RStudio shortcut for <- which also puts spaces around it: Alt/⌥ + -"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#basic-data-types-in-r",
    "href": "slides/01-foundations/02-data-wrangling/index.html#basic-data-types-in-r",
    "title": "Data Types, Structures and Wrangling",
    "section": "Basic data types in R",
    "text": "Basic data types in R\n\ncharacter: \"a\", \"hello, world!\"\ndouble: 3, 3.14, pi\ninteger: 3L (the L tells R to store this as an interger)\nlogical: TRUE and FALSE\ncomplex: 3+2i. N.B. need to write 1i for \\(\\sqrt(-1)\\).\nraw: holds raw bytes (rarely used)\n\nN.B. double and integer types are both numeric"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#special-values",
    "href": "slides/01-foundations/02-data-wrangling/index.html#special-values",
    "title": "Data Types, Structures and Wrangling",
    "section": "Special values",
    "text": "Special values\n\nNA: The value NA is given to any data which R knows to be missing. It is not a character string, i.e. it is different to \"NA\"\nInf: Positive infinity, e.g. the result of dividing a non-zero number by zero\nNaN: Not a number, e.g. attempting to find the logarithm of a negative number\nNULL: The null object. Often returned by expressions and functions whose value is undefined"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#data-structures",
    "href": "slides/01-foundations/02-data-wrangling/index.html#data-structures",
    "title": "Data Types, Structures and Wrangling",
    "section": "Data structures",
    "text": "Data structures\nData structures are the building blocks of R code.\nIn R, the main types of structures are\n\nvectors\nfactors\nmatrices and arrays\nlists\ndata frames\n\nFocus today on vectors, factors and data frames"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#vectors",
    "href": "slides/01-foundations/02-data-wrangling/index.html#vectors",
    "title": "Data Types, Structures and Wrangling",
    "section": "Vectors",
    "text": "Vectors\nA single number is a special case of a numeric vector. Vectors of length greater than one can be created using the concatenate function, c.\n\nx <- c(1, 3, 6)\nfruits <- c(\"apple\", \"pear\")\n\nThe elements of the vector must be of the same type: common types are numeric, character and logical.\nThere are built-in functions for getting information about vectors, e.g.\n\nlength(fruits)\n\n[1] 2"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#creating-vectors",
    "href": "slides/01-foundations/02-data-wrangling/index.html#creating-vectors",
    "title": "Data Types, Structures and Wrangling",
    "section": "Creating vectors",
    "text": "Creating vectors\nThere are some useful shortcuts for certain types of vector:\n\n1:5\n\n[1] 1 2 3 4 5\n\nseq(from = 3, to = 5, by = 0.5)\n\n[1] 3.0 3.5 4.0 4.5 5.0\n\nLETTERS\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\n\nWhat do you think letters returns?"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#subsetting-vectors",
    "href": "slides/01-foundations/02-data-wrangling/index.html#subsetting-vectors",
    "title": "Data Types, Structures and Wrangling",
    "section": "Subsetting vectors",
    "text": "Subsetting vectors\nWe subset vectors using []:\n\nBy position, starting at 1\n\n\nletters[c(1, 5, 9, 15, 21)]\n\n[1] \"a\" \"e\" \"i\" \"o\" \"u\"\n\n\n\nBy logical vector\n\n\nx <- c(5, 3, 6, 1)\nx[c(TRUE, FALSE, TRUE, FALSE)]\n\n[1] 5 6\n\n\n\nx[x > 4]\n\n[1] 5 6"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#your-turn",
    "href": "slides/01-foundations/02-data-wrangling/index.html#your-turn",
    "title": "Data Types, Structures and Wrangling",
    "section": "Your turn!",
    "text": "Your turn!\n\nIn your R-Foundations project from last week, create and save a new script called data-types.R\nLook at the help page for the rep() function: ?rep\nStarting with the vector c(1,3,6), can you make the following patterns:\n\n1, 3, 6, 1, 3, 6\n1, 1, 3, 3, 6, 6\n1, 1, 3, 3, 6, 6, 1, 1, 3, 3, 6, 6"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#factors",
    "href": "slides/01-foundations/02-data-wrangling/index.html#factors",
    "title": "Data Types, Structures and Wrangling",
    "section": "Factors",
    "text": "Factors\nFactors are used to represent categorical data. They can be ordered or unordered.\nFactors are stored as integers, and have labels associated with these unique integers. While factors usually look (and often behave) like character vectors, they are actually integers under the hood, and you need to be careful when treating them like strings."
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#factors-1",
    "href": "slides/01-foundations/02-data-wrangling/index.html#factors-1",
    "title": "Data Types, Structures and Wrangling",
    "section": "Factors",
    "text": "Factors\nOnce created, factors can only contain a pre-defined set values, known as levels. By default, R always sorts levels in alphabetical order. For instance, if you have a factor with 2 levels:\n\nfruits <- factor(c(\"apple\", \"apple\", \"pear\"))\nfruits\n\n[1] apple apple pear \nLevels: apple pear\n\nstr(fruits)\n\n Factor w/ 2 levels \"apple\",\"pear\": 1 1 2\n\n\nThe forcats package from the tidyverse has many functions for dealing with factors."
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#data-frames",
    "href": "slides/01-foundations/02-data-wrangling/index.html#data-frames",
    "title": "Data Types, Structures and Wrangling",
    "section": "Data frames",
    "text": "Data frames\nData sets are stored in R as data frames\nThese are structured as a list of objects, typically vectors, of the same length.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nstr(penguins)\n\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ..."
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#tibbles",
    "href": "slides/01-foundations/02-data-wrangling/index.html#tibbles",
    "title": "Data Types, Structures and Wrangling",
    "section": "tibbles",
    "text": "tibbles\nFrom the tibble page:\n\nA tibble, or tbl_df, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less (i.e. they don’t change variable names or types, and don’t do partial matching) and complain more (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced print() method which makes them easier to use with large datasets containing complex objects."
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#creating-data-frames",
    "href": "slides/01-foundations/02-data-wrangling/index.html#creating-data-frames",
    "title": "Data Types, Structures and Wrangling",
    "section": "Creating data frames",
    "text": "Creating data frames\n\n`my numbers` <- 1:9\nfruits <- rep(c(\"apple\", \"pear\", \"orange\"), 3)\n\n\n\n\ndata.frame(`my numbers`, \n           fruits)\n\n  my.numbers fruits\n1          1  apple\n2          2   pear\n3          3 orange\n4          4  apple\n5          5   pear\n6          6 orange\n7          7  apple\n8          8   pear\n9          9 orange\n\n\n\n\ntibble(`my numbers`, \n       fruits)\n\n# A tibble: 9 × 2\n  `my numbers` fruits\n         <int> <chr> \n1            1 apple \n2            2 pear  \n3            3 orange\n4            4 apple \n5            5 pear  \n6            6 orange\n7            7 apple \n8            8 pear  \n9            9 orange\n\n\n\n\nSpot the differences!"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#import-dataset-button",
    "href": "slides/01-foundations/02-data-wrangling/index.html#import-dataset-button",
    "title": "Data Types, Structures and Wrangling",
    "section": "Import dataset (button)",
    "text": "Import dataset (button)\nUsing the Import Dataset dialog in RStudio\n\nwe can import files stored locally or online in the following formats:\n\n.txt/.csv via read_delim/read_csv from readr.\n.xlsx via read_excel from readxl.\n.sav/.por , .sas7bdat and .dta via read_spss, read_sas and read_stata respectively from haven.\n\nMost of these functions also allow files to be compressed, e.g. as .zip."
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#file-names-and-paths-and-project-structure",
    "href": "slides/01-foundations/02-data-wrangling/index.html#file-names-and-paths-and-project-structure",
    "title": "Data Types, Structures and Wrangling",
    "section": "File names and paths and project structure",
    "text": "File names and paths and project structure\nIt’s REALLY important to have good file names and paths, and a good project structure.\nI leave you in the extremely capable hand of Danielle Navarro to take you thoroughly through best practices:\nhttps://djnavarro.net/slides-project-structure/#1\nI also HIGHLY recommend you check out the here package, which enables easy file referencing in project-oriented workflows"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#import-data-code",
    "href": "slides/01-foundations/02-data-wrangling/index.html#import-data-code",
    "title": "Data Types, Structures and Wrangling",
    "section": "Import data (code)",
    "text": "Import data (code)\nThe rio package provides a common interface to the functions used by Import Dataset as well as many others.\nThe data format is automatically recognised from the file extension. To read the data in as a tibble, we use the setclass argument.\n\nlibrary(rio)\npenguins_lter <- import(\"data/penguins_lter.csv\")\npenguins_lter_tbl <- import(\"data/penguins_lter.csv\", setclass = \"tibble\")\n\nSee ?rio for the underlying functions used for each format and the corresponding optional arguments, e.g. the skip argument to read_excel to skip a certain number of rows."
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#import-data-demo",
    "href": "slides/01-foundations/02-data-wrangling/index.html#import-data-demo",
    "title": "Data Types, Structures and Wrangling",
    "section": "Import data demo",
    "text": "Import data demo\n\nFrom file\nFrom URL\n\nhttps://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-09/wheels.csv\n\nYour turn!"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#dplyr",
    "href": "slides/01-foundations/02-data-wrangling/index.html#dplyr",
    "title": "Data Types, Structures and Wrangling",
    "section": "dplyr",
    "text": "dplyr\nThe dplyr package (part of the tidyverse) provides the following key functions to operate on data frames:\n\nfilter()\narrange()\nselect()\nmutate()\nsummarise()\n\nThey all take a data frame as their first argument. The subsequent arguments describe what to do with the data frame. The result is a new data frame."
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#load-packages",
    "href": "slides/01-foundations/02-data-wrangling/index.html#load-packages",
    "title": "Data Types, Structures and Wrangling",
    "section": "Load packages",
    "text": "Load packages\n\nlibrary(dplyr)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#filter-pick-rows-based-on-values-of-observations.",
    "href": "slides/01-foundations/02-data-wrangling/index.html#filter-pick-rows-based-on-values-of-observations.",
    "title": "Data Types, Structures and Wrangling",
    "section": "filter(): pick rows based on values of observations.",
    "text": "filter(): pick rows based on values of observations.\n\nExampleNotes\n\n\n\nfilter(penguins, \n       species == \"Gentoo\", \n       bill_length_mm > 48 & bill_depth_mm > 15, \n       !is.na(sex))\n\n# A tibble: 39 × 8\n   species island bill_length_mm bill_depth_mm flipper_len…¹ body_…² sex    year\n   <fct>   <fct>           <dbl>         <dbl>         <int>   <int> <fct> <int>\n 1 Gentoo  Biscoe           50            16.3           230    5700 male   2007\n 2 Gentoo  Biscoe           50            15.2           218    5700 male   2007\n 3 Gentoo  Biscoe           49            16.1           216    5550 male   2007\n 4 Gentoo  Biscoe           49.3          15.7           217    5850 male   2007\n 5 Gentoo  Biscoe           49.2          15.2           221    6300 male   2007\n 6 Gentoo  Biscoe           48.7          15.1           222    5350 male   2007\n 7 Gentoo  Biscoe           50            15.3           220    5550 male   2007\n 8 Gentoo  Biscoe           59.6          17             230    6050 male   2007\n 9 Gentoo  Biscoe           48.4          16.3           220    5400 male   2008\n10 Gentoo  Biscoe           48.7          15.7           208    5350 male   2008\n# … with 29 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\n\n\n\nvariable names are unquoted\nbuilding blocks of conditions:\n\n\n\n\nBuilding block\nR code\n\n\n\n\nBinary comparisons\n>, <, ==, <=, >=, !=\n\n\nLogical operators\nor |, and &, not !\n\n\nValue matching\ne.g. x %in% 6:9\n\n\nMissing indicator\ne.g. is.na(x)"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#select-select-variables-columns-in-a-dataset",
    "href": "slides/01-foundations/02-data-wrangling/index.html#select-select-variables-columns-in-a-dataset",
    "title": "Data Types, Structures and Wrangling",
    "section": "select(): select variables (columns) in a dataset",
    "text": "select(): select variables (columns) in a dataset\n\nExample 1Example 2Example 3Example 4Note\n\n\n\nselect(penguins, bill_length_mm, bill_depth_mm)\n\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            <dbl>         <dbl>\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# … with 334 more rows\n\n\n\n\n\nselect(penguins, bill_length_mm:body_mass_g)\n\n# A tibble: 344 × 4\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n            <dbl>         <dbl>             <int>       <int>\n 1           39.1          18.7               181        3750\n 2           39.5          17.4               186        3800\n 3           40.3          18                 195        3250\n 4           NA            NA                  NA          NA\n 5           36.7          19.3               193        3450\n 6           39.3          20.6               190        3650\n 7           38.9          17.8               181        3625\n 8           39.2          19.6               195        4675\n 9           34.1          18.1               193        3475\n10           42            20.2               190        4250\n# … with 334 more rows\n\n\n\n\n\nselect(penguins, starts_with(\"bill\"))\n\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            <dbl>         <dbl>\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# … with 334 more rows\n\n\n\n\n\nselect(penguins, where(is.numeric))\n\n# A tibble: 344 × 5\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n            <dbl>         <dbl>             <int>       <int> <int>\n 1           39.1          18.7               181        3750  2007\n 2           39.5          17.4               186        3800  2007\n 3           40.3          18                 195        3250  2007\n 4           NA            NA                  NA          NA  2007\n 5           36.7          19.3               193        3450  2007\n 6           39.3          20.6               190        3650  2007\n 7           38.9          17.8               181        3625  2007\n 8           39.2          19.6               195        4675  2007\n 9           34.1          18.1               193        3475  2007\n10           42            20.2               190        4250  2007\n# … with 334 more rows\n\n\n\n\nThere are several other selectors. See ?dplyr::select or online for further details."
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#a-note-about-pipes-vs",
    "href": "slides/01-foundations/02-data-wrangling/index.html#a-note-about-pipes-vs",
    "title": "Data Types, Structures and Wrangling",
    "section": "A note about pipes: |> vs %>%",
    "text": "A note about pipes: |> vs %>%\nPipes pass what comes before into an argument (by default the first) of what comes after.\nPipes are a powerful tool for clearly expressing a sequence of multiple operations.\n\n\n|>\n\nThe ‘native’ pipe, built into base R since v4.1 (May 2021)\nImproved in v4.2 (April 2022)\n\n\n%>%\n\nHas been around in the magrittr package since 2014\nUsed throughout the tidyverse (though that is changing)"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#pipes-similarity",
    "href": "slides/01-foundations/02-data-wrangling/index.html#pipes-similarity",
    "title": "Data Types, Structures and Wrangling",
    "section": "Pipes: similarity",
    "text": "Pipes: similarity\nBy default, a pipe takes what comes before and pass it to first argument of what comes after.\n\nExample 1Example 2\n\n\n\nlog(2, base = 10)\n\n[1] 0.30103\n\n2 %>% log(base = 10)\n\n[1] 0.30103\n\n2 |> log(base = 10)\n\n[1] 0.30103\n\n\n\n\n\npaste(\"a\", \"b\", \"c\")\n\n[1] \"a b c\"\n\n\"a\" %>% paste(\"b\", \"c\")\n\n[1] \"a b c\"\n\n\"a\" |> paste(\"b\", \"c\")\n\n[1] \"a b c\""
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#pipes-key-difference",
    "href": "slides/01-foundations/02-data-wrangling/index.html#pipes-key-difference",
    "title": "Data Types, Structures and Wrangling",
    "section": "Pipes: key difference",
    "text": "Pipes: key difference\nSo far, so good, but what if we want to pipe into a subsequent argument?\n\nExample 1Example 2\n\n\n\nlog(2, 10) ## don't need to name the argument\n\n[1] 0.30103\n\n10 %>% log(2, .)\n\n[1] 0.30103\n\n10 |> log(2, base = _)\n\n[1] 0.30103\n\n\n\n\n\npaste(\"a\", \"b\", \"c\")\n\n[1] \"a b c\"\n\n\"b\" %>% paste(\"a\", ., \"c\")\n\n[1] \"a b c\"\n\n\"b\" |> paste(\"a\", ..2 = _, \"c\")\n\n[1] \"a b c\"\n\n\n\n\n\nDifferent placeholder (. vs _) and with native pipe need a named argument"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#arrange-change-the-ordering-of-rows",
    "href": "slides/01-foundations/02-data-wrangling/index.html#arrange-change-the-ordering-of-rows",
    "title": "Data Types, Structures and Wrangling",
    "section": "arrange(): change the ordering of rows",
    "text": "arrange(): change the ordering of rows\n\nExample 1Example 2Example 3\n\n\n\npenguins |>\n  select(species, sex, flipper_length_mm) |>\n  arrange(flipper_length_mm)\n\n# A tibble: 344 × 3\n   species   sex    flipper_length_mm\n   <fct>     <fct>              <int>\n 1 Adelie    female               172\n 2 Adelie    female               174\n 3 Adelie    female               176\n 4 Adelie    female               178\n 5 Adelie    male                 178\n 6 Adelie    female               178\n 7 Chinstrap female               178\n 8 Adelie    <NA>                 179\n 9 Adelie    <NA>                 180\n10 Adelie    male                 180\n# … with 334 more rows\n\n\n\n\n\npenguins |>\n  select(species, sex, flipper_length_mm) |>\n  arrange(species, flipper_length_mm)\n\n# A tibble: 344 × 3\n   species sex    flipper_length_mm\n   <fct>   <fct>              <int>\n 1 Adelie  female               172\n 2 Adelie  female               174\n 3 Adelie  female               176\n 4 Adelie  female               178\n 5 Adelie  male                 178\n 6 Adelie  female               178\n 7 Adelie  <NA>                 179\n 8 Adelie  <NA>                 180\n 9 Adelie  male                 180\n10 Adelie  male                 180\n# … with 334 more rows\n\n\n\n\n\npenguins |>\n  select(species, sex, flipper_length_mm) |>\n  arrange(desc(flipper_length_mm))\n\n# A tibble: 344 × 3\n   species sex   flipper_length_mm\n   <fct>   <fct>             <int>\n 1 Gentoo  male                231\n 2 Gentoo  male                230\n 3 Gentoo  male                230\n 4 Gentoo  male                230\n 5 Gentoo  male                230\n 6 Gentoo  male                230\n 7 Gentoo  male                230\n 8 Gentoo  male                230\n 9 Gentoo  male                229\n10 Gentoo  male                229\n# … with 334 more rows"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#mutate-create-and-modify-columns",
    "href": "slides/01-foundations/02-data-wrangling/index.html#mutate-create-and-modify-columns",
    "title": "Data Types, Structures and Wrangling",
    "section": "mutate(): create and modify columns",
    "text": "mutate(): create and modify columns\n\nExample 1Example 2Example 3\n\n\n\npenguins |>\n  select(bill_length_mm) |>\n  mutate(bill_length_mm_sq = bill_length_mm^2)\n\n# A tibble: 344 × 2\n   bill_length_mm bill_length_mm_sq\n            <dbl>             <dbl>\n 1           39.1             1529.\n 2           39.5             1560.\n 3           40.3             1624.\n 4           NA                 NA \n 5           36.7             1347.\n 6           39.3             1544.\n 7           38.9             1513.\n 8           39.2             1537.\n 9           34.1             1163.\n10           42               1764 \n# … with 334 more rows\n\n\n\n\n\npenguins |>\n  filter(species == \"Gentoo\") |>\n  select(sex, flipper_length_mm) |>\n  mutate(size = if_else(flipper_length_mm > 217, \"big\", \"small\"))\n\n# A tibble: 124 × 3\n   sex    flipper_length_mm size \n   <fct>              <int> <chr>\n 1 female               211 small\n 2 male                 230 big  \n 3 female               210 small\n 4 male                 218 big  \n 5 male                 215 small\n 6 female               210 small\n 7 female               211 small\n 8 male                 219 big  \n 9 female               209 small\n10 male                 215 small\n# … with 114 more rows\n\n\n\n\n\npenguins |>\n  select(bill_length_mm) |>\n  filter(!is.na(bill_length_mm)) |>\n  mutate(bill_length_mm_cumsum = cumsum(bill_length_mm))\n\n# A tibble: 342 × 2\n   bill_length_mm bill_length_mm_cumsum\n            <dbl>                 <dbl>\n 1           39.1                  39.1\n 2           39.5                  78.6\n 3           40.3                 119. \n 4           36.7                 156. \n 5           39.3                 195. \n 6           38.9                 234. \n 7           39.2                 273  \n 8           34.1                 307. \n 9           42                   349. \n10           37.8                 387. \n# … with 332 more rows"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#summarise-reduces-multiple-values-down-to-a-single-summary",
    "href": "slides/01-foundations/02-data-wrangling/index.html#summarise-reduces-multiple-values-down-to-a-single-summary",
    "title": "Data Types, Structures and Wrangling",
    "section": "summarise(): reduces multiple values down to a single summary",
    "text": "summarise(): reduces multiple values down to a single summary\n\nExample 1Example 2Example 3: count\n\n\n\npenguins |>\n  summarise(mean(body_mass_g, na.rm = TRUE))  \n\n# A tibble: 1 × 1\n  `mean(body_mass_g, na.rm = TRUE)`\n                              <dbl>\n1                             4202.\n\n\n\n\n\npenguins |>\n  group_by(species, sex) |>\n  filter(!is.na(sex)) |>\n  summarise(mean = mean(body_mass_g, na.rm = TRUE)) # give column a name\n\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex     mean\n  <fct>     <fct>  <dbl>\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Chinstrap female 3527.\n4 Chinstrap male   3939.\n5 Gentoo    female 4680.\n6 Gentoo    male   5485.\n\n\n\n\n\npenguins |>\n  count(species, island)\n\n# A tibble: 5 × 3\n  species   island        n\n  <fct>     <fct>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n\n\nShortcut for\n\npenguins |>\n  group_by(species, island) %>%\n  summarise(n = n())"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#your-turn-1",
    "href": "slides/01-foundations/02-data-wrangling/index.html#your-turn-1",
    "title": "Data Types, Structures and Wrangling",
    "section": "Your turn!",
    "text": "Your turn!\n\nExplore the wheels data!\nBe ready to share some of your code in the chat"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#tidydatatutor.com",
    "href": "slides/01-foundations/02-data-wrangling/index.html#tidydatatutor.com",
    "title": "Data Types, Structures and Wrangling",
    "section": "tidydatatutor.com",
    "text": "tidydatatutor.com\nTidy Data Tutor lets you write R and Tidyverse code in your browser and see how your data frame changes at each step of a data analysis pipeline.\nDEMO"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#additional-resources",
    "href": "slides/01-foundations/02-data-wrangling/index.html#additional-resources",
    "title": "Data Types, Structures and Wrangling",
    "section": "Additional resources",
    "text": "Additional resources\n\nRStudio cheatsheets\nR for data science book\nferriswheels"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#sources",
    "href": "slides/01-foundations/02-data-wrangling/index.html#sources",
    "title": "Data Types, Structures and Wrangling",
    "section": "Sources",
    "text": "Sources\nMaterial inspired by and remixed from:\n\nhttps://stat545.com/r-basics.html\nhttps://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/\nhttps://slides.silviacanelon.com/tour-of-the-tidyverse-v2/\nhttps://www.heatherturner.net/teaching/zero-to-hero/\nhttp://adv-r.had.co.nz/Style.html"
  },
  {
    "objectID": "slides/01-foundations/02-data-wrangling/index.html#license",
    "href": "slides/01-foundations/02-data-wrangling/index.html#license",
    "title": "Data Types, Structures and Wrangling",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#overview",
    "href": "slides/01-foundations/03-programming/index.html#overview",
    "title": "Programming in R",
    "section": "Overview",
    "text": "Overview\n\nMore on data structures\nControl flow and iteration functions\nEfficient R programming\nWriting functions (basics)"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#intro",
    "href": "slides/01-foundations/03-programming/index.html#intro",
    "title": "Programming in R",
    "section": "Intro",
    "text": "Intro\nUnderstanding the basics of R programming helps to improve analysis/reporting scripts and extend what we can do with R.\nGood coding practice follows the DRY principle: Don’t Repeat Yourself. Rather than modifying copy-pasted code chunks, we might\n\nwrite a custom function\nuse loops or iteration functions to perform multiple similar tasks\n\nCustom functions can be used to provide convenient wrappers to complex code chunks as well as implement novel functionality."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#data-structures-revisited",
    "href": "slides/01-foundations/03-programming/index.html#data-structures-revisited",
    "title": "Programming in R",
    "section": "Data Structures Revisited",
    "text": "Data Structures Revisited\nFor basic data analysis, our data is usually imported and we use high-level functions (e.g. from dplyr) to handle it.\nFor programming, we need to work with lower-level data structures and be able to\n\ncreate basic objects\nextract components\ncoerce one data type to another\n\nWorking with base R functions when programming also helps avoid dependencies, which is useful when writing packages."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#vectors",
    "href": "slides/01-foundations/03-programming/index.html#vectors",
    "title": "Programming in R",
    "section": "Vectors",
    "text": "Vectors\nnumeric(), character() and logical() can be used to initialize vectors of the corresponding type for a given length\n\nx <- numeric(3)\nx\n\n[1] 0 0 0\n\n\nElements can be assigned by indexing the positions to be filled, e.g.\n\nx[1] <- 4 # assign 4 to 1st element\nx[-c(2, 3)] <- 4 # assign 4 to everying *except* 2nd and 3rd element\n\nThis is particularly useful when programming an iterative procedure.\nas.logical(), as.numeric() and as.character() coerce to the corresponding type, producing NAs if coercion fails."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#logical-vectors",
    "href": "slides/01-foundations/03-programming/index.html#logical-vectors",
    "title": "Programming in R",
    "section": "Logical Vectors",
    "text": "Logical Vectors\nLogical vectors are commonly used when indexing. The vector might be produced by a logical operator:\n\nx <- c(1, 1, 2, 2, 2)\nx > 1\n\n[1] FALSE FALSE  TRUE  TRUE  TRUE\n\nx[x > 1]\n\n[1] 2 2 2\n\n\nduplicated() is also useful here:\n\nduplicated(x)\n\n[1] FALSE  TRUE FALSE  TRUE  TRUE\n\n!duplicated(x)\n\n[1]  TRUE FALSE  TRUE FALSE FALSE"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#numeric-vectors",
    "href": "slides/01-foundations/03-programming/index.html#numeric-vectors",
    "title": "Programming in R",
    "section": "Numeric Vectors",
    "text": "Numeric Vectors\nThe are several convenience function for creating numeric vectors, notably seq() and rep().\nAs they are so useful there are fast shortcuts for particular cases\n\nseq_len(4)\n\n[1] 1 2 3 4\n\nfruits <- c(\"apple\", \"pear\", \"banana\")\nseq_along(fruits) # a sequence from 1 to the length of x\n\n[1] 1 2 3\n\nrep.int(1:2, times = c(2, 3))\n\n[1] 1 1 2 2 2"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#character-vectors",
    "href": "slides/01-foundations/03-programming/index.html#character-vectors",
    "title": "Programming in R",
    "section": "Character Vectors",
    "text": "Character Vectors\nCharacter vectors may be used for creating names\n\nx <- 3:5\nnames(x) <- paste0(LETTERS[1:3], 1229:1231)\nx\n\nA1229 B1230 C1231 \n    3     4     5 \n\nnames(x)\n\n[1] \"A1229\" \"B1230\" \"C1231\"\n\n\nNames can be used as an alternative to numeric or logical vectors when indexing\n\nx[\"B1230\"]\n\nB1230 \n    4"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#matrices",
    "href": "slides/01-foundations/03-programming/index.html#matrices",
    "title": "Programming in R",
    "section": "Matrices",
    "text": "Matrices\nA matrix is in fact also a vector, with an attribute giving the dimensions of the matrix\n\ndefaultbyrow\n\n\n\nM <- matrix(1:6, 2, 3) # data, nrow, ncol\nM\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nstr(M)\n\n int [1:2, 1:3] 1 2 3 4 5 6\n\nattributes(M)\n\n$dim\n[1] 2 3\n\n\n\n\nThe byrow argument is also useful:\n\nN <- matrix(1:6, 2, 3, byrow = TRUE) # data, nrow, ncol\nN\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#matrix-functions",
    "href": "slides/01-foundations/03-programming/index.html#matrix-functions",
    "title": "Programming in R",
    "section": "Matrix functions",
    "text": "Matrix functions\nUseful functions for matrices include dim(), ncol(), nrow(), colnames() and rownames(). rbind() and cbind() can be used to row-bind or column-bind vectors.\nMatrices enable computation via matrix algebra as well as row/column-wise operations."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#lists",
    "href": "slides/01-foundations/03-programming/index.html#lists",
    "title": "Programming in R",
    "section": "Lists",
    "text": "Lists\nLists collect together items which may be different types or lengths. Like a vector, elements may be named.\n\nresults <- list(matrix = M, vector = x)\nresults\n\n$matrix\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n$vector\nA1229 B1230 C1231 \n    3     4     5 \n\n\nLists are often used to return the results of a function."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#indexing-lists",
    "href": "slides/01-foundations/03-programming/index.html#indexing-lists",
    "title": "Programming in R",
    "section": "Indexing lists",
    "text": "Indexing lists\nElements can be indexed by [ to return a list or [[ to return a single element, either by index or name:\n\nresults[\"vector\"] # returns a list\n\n$vector\nA1229 B1230 C1231 \n    3     4     5 \n\nresults[[2]] # returns a vector\n\nA1229 B1230 C1231 \n    3     4     5 \n\n\n$ can be used to extract elements by name:\n\nresults$vector # equivalent to results[[\"vector\"]]\n\nA1229 B1230 C1231 \n    3     4     5"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#data-frames",
    "href": "slides/01-foundations/03-programming/index.html#data-frames",
    "title": "Programming in R",
    "section": "Data Frames",
    "text": "Data Frames\nData frames are lists of variables of the same length and hence can often be treated as a matrix\n\nx <- 1:3\ndat <- data.frame(x = x, id = letters[1:3])\ndat\n\n  x id\n1 1  a\n2 2  b\n3 3  c\n\ndat[1]\n\n  x\n1 1\n2 2\n3 3\n\ndat[[1]]\n\n[1] 1 2 3\n\ndat[1, 2]\n\n[1] \"a\""
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#your-turn",
    "href": "slides/01-foundations/03-programming/index.html#your-turn",
    "title": "Programming in R",
    "section": "Your turn!",
    "text": "Your turn!\nThe lm function calls the “workhorse” function lm.fit to actually fit the model. Unlike lm, which works from a formula, lm.fit works from the model matrix and the response vector.\n\nDefine a response y containing 10 numeric values. Define an explanatory variable z of the numbers 1 to 10.\nUse the function cbind() to create a matrix x with 1s in the first column and z in the second column.\nFit a model using fit1 <- lm.fit(x, y). Use str to explore the structure of the results. Use $ to extract the coefficients.\nCreate a second fit using lm(y ~ z). Use names to compare the results. Check the coefficients of the second fit are the same."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#your-turn-a-solution",
    "href": "slides/01-foundations/03-programming/index.html#your-turn-a-solution",
    "title": "Programming in R",
    "section": "Your turn! (a solution)",
    "text": "Your turn! (a solution)\n\n# A possible solution\n\nset.seed(1)\ny <- sample(10)\nz <- 1:10\n\nx <- cbind(1, z) # we'll see this trick in a few slides time!\n\nfit1 <- lm.fit(x,y)\nstr(fit1)\nfit1$coefficients\n\nfit2 <- lm(y ~ z)\nnames(fit1)\nnames(fit2)\nfit2$coefficients"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#control-structures",
    "href": "slides/01-foundations/03-programming/index.html#control-structures",
    "title": "Programming in R",
    "section": "Control Structures",
    "text": "Control Structures\nControl structures are the commands that make decisions or execute loops.\nConditional execution: if/else, switch\nLoops: for, while, repeat"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#ifelse",
    "href": "slides/01-foundations/03-programming/index.html#ifelse",
    "title": "Programming in R",
    "section": "if/else",
    "text": "if/else\nAn if statement can stand alone or be combined with an else statement\n\nx <- 1:3\nif (all(x > 0)) {\n    res <- mean(x)\n} else {\n    res <- mean(abs(x))\n}\nres\n\n[1] 2\n\n\nThe condition must evaluate to logical vector of length one. The functions all(), any(), is.na(), is.null() and other is. functions are useful here."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#conditioning-on-equality",
    "href": "slides/01-foundations/03-programming/index.html#conditioning-on-equality",
    "title": "Programming in R",
    "section": "Conditioning on equality",
    "text": "Conditioning on equality\nUsing == may not be appropriate as it compares each element; identical() will test the whole object\n\nx <- y <- 1:2\nx == y\n\n[1] TRUE TRUE\n\nidentical(x, y)\n\n[1] TRUE\n\n\nall.equal() will allow for some numerical “fuzz”\n\nz <- sqrt(2)\nidentical(z * z, 2)\n\n[1] FALSE\n\nall.equal(z * z, 2)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#switch",
    "href": "slides/01-foundations/03-programming/index.html#switch",
    "title": "Programming in R",
    "section": "switch",
    "text": "switch\nThe switch() function provides a more readable alternative to nested if statements\n\nif (summary == \"IQR\") { \n    y <- IQR(x)\n} else {\n    if (summary == \"range\"){\n        y <- range(x)\n    } else y <- mean(x)\n}\n\n\nx <- 1:5\nswitch(\"range\", # can enter an arg name or position\n       IQR = IQR(x),\n       range = range(x),\n       mean(x))\n\n[1] 1 5\n\n\nThe final unnamed argument is the default.\nFurther examples"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#for",
    "href": "slides/01-foundations/03-programming/index.html#for",
    "title": "Programming in R",
    "section": "for",
    "text": "for\nA for loop repeats a chunk of code, iterating along the values of a vector or list\n\nx <- c(\"apple\", \"pear\")\nfor (nm in x) print(nm)\n\n[1] \"apple\"\n[1] \"pear\"\n\n\nUnassigned objects are not automatically printed; hence call to print(). This also applies to ggplot objects, which only display when printed.\n\nfor (i in seq_along(x)) {\n    message(\"Element \", i, \": \", x[i])\n}\n\nseq_along() is used here rather than 1:length(x) as length(x) may be zero. message is used to print messages to the console."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#while-and-repeat",
    "href": "slides/01-foundations/03-programming/index.html#while-and-repeat",
    "title": "Programming in R",
    "section": "while and repeat",
    "text": "while and repeat\nThe while loop repeats while a condition is TRUE\n\nn_iter <- 1\nwhile (n_iter < 3) {\n    x <- x * 2\n    n_iter <- n_iter + 1\n}\n\nThe repeat loop repeats until exited by break\n\nrepeat {\n    x <- x + 1\n    if (max(x) > 10) break\n}\n\nbreak can be used in for or while loops too.\nnext can be used to skip to the next iteration."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#iteration-functions",
    "href": "slides/01-foundations/03-programming/index.html#iteration-functions",
    "title": "Programming in R",
    "section": "Iteration functions",
    "text": "Iteration functions\nIteration functions provide a general alternative to for loops. They are not necessarily faster, but can be more compact.\napply() applies a function over rows/columns of a matrix.\nlapply(), sapply() and vapply() iterate over a list or vector. vapply() is recommended for programming as it specifies the type of return value\n\nvapply(list(a = 1:3, b = 1:6), FUN = mean, FUN.VALUE = numeric(1))\n\n  a   b \n2.0 3.5 \n\n\nmapply() iterates over two or more lists/vectors in parallel."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#iteration-function-resources",
    "href": "slides/01-foundations/03-programming/index.html#iteration-function-resources",
    "title": "Programming in R",
    "section": "Iteration function resources",
    "text": "Iteration function resources\n\nEfficient R by Colin Gillespie and Robin Lovelace\nThe built-in help pages. You can directly access the examples using the example() function, e.g. to run the apply() examples, use example(\"apply\").\nThis StackOverflow answer, describing when, where and how to use each of the functions.\nThis blog post by Neil Saunders"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#purrr",
    "href": "slides/01-foundations/03-programming/index.html#purrr",
    "title": "Programming in R",
    "section": "purrr",
    "text": "purrr\nThe purrr package (part of the tidyverse) provides alternatives to the apply family that have a simpler, more consistent interface with fixed type of return value.\n\n# Split a data frame into pieces, \n# fit a model to each piece, summarise and extract R^2\nlibrary(purrr)\n\nmtcars %>%\n  split(.$cyl) %>% # base R\n  map(~ lm(mpg ~ wt, data = .x)) %>% # returns a list\n  map(summary) %>%\n  map_dbl(\"r.squared\") # returns a vector\n\n        4         6         8 \n0.5086326 0.4645102 0.4229655"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#advantages-of-purrr",
    "href": "slides/01-foundations/03-programming/index.html#advantages-of-purrr",
    "title": "Programming in R",
    "section": "Advantages of purrr",
    "text": "Advantages of purrr\n\nThe first argument is always the data, so purrr works naturally with the pipe.\nAll purrr functions are type-stable. They always return the advertised output type (e.g. map() returns lists; map_dbl() returns double vectors), or they throw an error.\nAll map() functions either accept function, formulas (used for succinctly generating anonymous functions), a character vector (used to extract components by name), or a numeric vector (used to extract by position).\n\nSee the iteration chapter of R for Data Science for further examples and details"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#growing-objects",
    "href": "slides/01-foundations/03-programming/index.html#growing-objects",
    "title": "Programming in R",
    "section": "Growing Objects",
    "text": "Growing Objects\nAdding to an object in a loop, e.g. via c() or cbind()\n\nres <- NULL\nfor (i in 1:10000) res <- c(res, 1)\n\nforces a copy to be made at each iteration. THIS IS BAD!\nIt is far better to create an object of the necessary size first\n\nres <- numeric(10000)\nfor (i in seq_along(res)) res[i] <- 1\n\nTo initialise a list we can use\n\nres <- vector(mode = \"list\", length = 100)"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#benchmarking",
    "href": "slides/01-foundations/03-programming/index.html#benchmarking",
    "title": "Programming in R",
    "section": "Benchmarking",
    "text": "Benchmarking\nThere will usually be many ways to write code for a given task. To compare alternatives, we can benchmark the expression\n\nlibrary(rbenchmark)\nbenchmark({res <- NULL;\n           for (i in 1:10000) res <- c(res, 1)})$elapsed\n\n[1] 12.422\n\nbenchmark({res <- numeric(10000)\n           for (i in seq_along(res)) res[i] <- 1})$elapsed\n\n[1] 0.074\n\n\nNote the BIG difference between growing and initialising a vector (the latter around 150 times faster in this case)."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#for-loops-revisited",
    "href": "slides/01-foundations/03-programming/index.html#for-loops-revisited",
    "title": "Programming in R",
    "section": "for loops revisited",
    "text": "for loops revisited\nEach loop has three components:\n\nThe output: allocate sufficient space before you start the loop\nThe sequence: this determines what you loop over\nThe body: the code that does the work\n\nSee https://r4ds.had.co.nz/iteration.html#for-loops"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#vectorization",
    "href": "slides/01-foundations/03-programming/index.html#vectorization",
    "title": "Programming in R",
    "section": "Vectorization",
    "text": "Vectorization\nVectorization is operating on vectors (or vector-like objects) rather than individual elements.\nMany operations in R are vectorized, e.g.\n\nx <- 1:3\ny <- 3:1\nx == y\n\n[1] FALSE  TRUE FALSE\n\nlog(x)\n\n[1] 0.0000000 0.6931472 1.0986123\n\nres <- list(a = 1:3, b = 1:6)\nlengths(res)\n\na b \n3 6 \n\n\nWe do not need to loop through each element!"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#recycling",
    "href": "slides/01-foundations/03-programming/index.html#recycling",
    "title": "Programming in R",
    "section": "Recycling",
    "text": "Recycling\nVectorized functions will recycle shorter vectors to create vectors of the same length\n\n1:4 + 0:1 # 1+0, 2+1, 3+0, 4+1\n\n[1] 1 3 3 5\n\n\nThis is particularly useful for single values\n\ncbind(1, 3:4)\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    1    4\n\n\nand for generating regular patterns\n\npaste0(rep(1:3, each = 2), c(\"a\", \"b\"))\n\n[1] \"1a\" \"1b\" \"2a\" \"2b\" \"3a\" \"3b\""
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#your-turn-1",
    "href": "slides/01-foundations/03-programming/index.html#your-turn-1",
    "title": "Programming in R",
    "section": "Your turn!",
    "text": "Your turn!\n\nWrite a for loop to compute the mean of every column of in mtcars, saving each to a preallocated vector\nUse lapply() with rnorm to generate a list of length 10 where the 1st item contains a vector of 1 sample from an \\(N(0,1)\\) distribution, the 2nd item contains a vector of 2 samples from an \\(N(0,1)\\) distribution up to the 10th item contains a vector of 10 samples from an \\(N(0,1)\\) distibution.\nUse lapply() with rnorm to generate a list of length 10, where the 1st item contains a vector of 5 samples from \\(N(1,1)\\), the 2nd item contains a vector of 5 samples \\(N(2,1)\\) and so on until you get 5 samples from \\(N(10,1)\\)"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#your-turn-sample-solutions",
    "href": "slides/01-foundations/03-programming/index.html#your-turn-sample-solutions",
    "title": "Programming in R",
    "section": "Your turn! (sample solutions)",
    "text": "Your turn! (sample solutions)\n\nout <- numeric(ncol(mtcars))\n\nfor (i in seq_len(ncol(mtcars))) {\n  out[i] <- mean(mtcars[[i]])\n}\n\n\nlapply(1:10, rnorm)\n\n\nlapply(1:10, rnorm, n = 5)"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#vectorization-and-matrices",
    "href": "slides/01-foundations/03-programming/index.html#vectorization-and-matrices",
    "title": "Programming in R",
    "section": "Vectorization and Matrices",
    "text": "Vectorization and Matrices\nVectorizations applies to matices too, not only through matrix algebra\n\nM <- matrix(1:4, nrow = 2, ncol = 2)\nM + M\n\n     [,1] [,2]\n[1,]    2    6\n[2,]    4    8\n\n\nbut also vectorized functions\n\nM <- M + .3\nround(M)\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#matrices-and-recycling",
    "href": "slides/01-foundations/03-programming/index.html#matrices-and-recycling",
    "title": "Programming in R",
    "section": "Matrices and Recycling",
    "text": "Matrices and Recycling\nValues are recycled down matrix, which is convenient for row-wise operations\n\nM <- matrix(1:6, nrow = 2, ncol = 3)\nM\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nM - 1:2\n\n     [,1] [,2] [,3]\n[1,]    0    2    4\n[2,]    0    2    4\n\n\nTo do the same for columns we would need to explicitly replicate, which is not so efficient.\n\nM - rep(1:3, each = 2)\n\n     [,1] [,2] [,3]\n[1,]    0    1    2\n[2,]    1    2    3"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#vectorization-vs-for-loop",
    "href": "slides/01-foundations/03-programming/index.html#vectorization-vs-for-loop",
    "title": "Programming in R",
    "section": "Vectorization vs For Loop",
    "text": "Vectorization vs For Loop\nOperations that can be vectorized will be more efficient than a loop in R\n\nM <- matrix(1:100000, nrow = 200, ncol = 500)\nx <- 1:200\nbenchmark({for (i in 1:200){\n             for (j in 1:500){\n               M[i, j] <- M[i, j] - x[i]\n             }\n           }})$elapsed\n\n[1] 0.657\n\nbenchmark({M - x})$elapsed\n\n[1] 0.024\n\n\nThe latter is nearly 30 times faster!"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#rowcolumn-wise-operations",
    "href": "slides/01-foundations/03-programming/index.html#rowcolumn-wise-operations",
    "title": "Programming in R",
    "section": "Row/Column-wise Operations",
    "text": "Row/Column-wise Operations\nSeveral functions are available implementing efficient row/column-wise operations, e.g. colMeans(), rowMeans(), colSums(), rowSums(), sweep()\n\nM <- matrix(1:4, nrow = 2, ncol = 2)\nrowMeans(M)\n\n[1] 2 3\n\n\nThese provide an alternative to iterating though rows and columns in R (the iteration happens in C, which is faster).\nThe matrixStats provides further “matricised” methods."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#top-tips-for-efficient-programming",
    "href": "slides/01-foundations/03-programming/index.html#top-tips-for-efficient-programming",
    "title": "Programming in R",
    "section": "Top tips for efficient programming",
    "text": "Top tips for efficient programming\nA golden rule in R programming is to access the underlying C/Fortran routines as quickly as possible; the fewer functions calls required to achieve this, the better.\n\nBe careful never to grow vectors\nVectorise code wherever possible\n\nSee Efficient Programming for more details and examples."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#components-of-a-function",
    "href": "slides/01-foundations/03-programming/index.html#components-of-a-function",
    "title": "Programming in R",
    "section": "Components of a function",
    "text": "Components of a function\nFunctions are defined by three components:\n\nthe name of the function\nthe arguments of the function, inside ( )\nthe body of the function that computes the result, inside { }\n\nThey are created using function()\n\nt_statistic <- function(n) {\n    x <- rnorm(n)\n    y <- rnorm(n)\n    t.test(x, y)$statistic\n}"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#naming-functions",
    "href": "slides/01-foundations/03-programming/index.html#naming-functions",
    "title": "Programming in R",
    "section": "Naming Functions",
    "text": "Naming Functions\nAs with arguments, function names are important:\n\nuse a name that describes what it returns (e.g. t_statistic) or what it does (e.g. remove_na)\ntry to use one convention for combining words (e.g. snake case t_statistic or camel case tStatistic)\navoid using the same name as other functions"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#specified-arguments",
    "href": "slides/01-foundations/03-programming/index.html#specified-arguments",
    "title": "Programming in R",
    "section": "Specified Arguments",
    "text": "Specified Arguments\nspecified arguments are those named in the function definition, e.g.  in rnorm()\n\nargs(rnorm)\n\nfunction (n, mean = 0, sd = 1) \nNULL\n\n\nthe arguments are n, mean and sd.\nmean and sd have been given default values in the function definition, but n has not, so the function fails if the user does not pass a value to n\n\nrnorm()\n\nError in rnorm(): argument \"n\" is missing, with no default"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#name-and-order-of-arguments",
    "href": "slides/01-foundations/03-programming/index.html#name-and-order-of-arguments",
    "title": "Programming in R",
    "section": "Name and Order of Arguments",
    "text": "Name and Order of Arguments\nThe user can pass objects to these arguments using their names or by supplying unnamed values in the right order\n\nrnorm(5, 1, 10)\n\n[1]  -8.063367   3.845973  -8.409537  -1.957449 -25.138085\n\nrnorm(5, sd = 10)\n\n[1] 14.5610754 -4.8054195 -0.5875519  4.7357928 20.4064227\n\n\nSo naming and order is important! Some guidelines\n\nput compulsory arguments first, e.g. data\nput rarely used arguments last, e.g. tolerance setting\nuse short but meaningful argument names\nif relevant, use the same argument names as similar functions"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#using-arguments",
    "href": "slides/01-foundations/03-programming/index.html#using-arguments",
    "title": "Programming in R",
    "section": "Using Arguments",
    "text": "Using Arguments\nArguments are used as objects in the function code.\nAn new environment is created each time the function is called, separate from the global workspace.\n\nx <- 1\ny <- 3\nf <- function(x, y){\n    a <- 1\n    x <- x + a\n    x + y\n}\nf(x, y)\n\n[1] 5\n\nx\n\n[1] 1\n\na\n\nError in eval(expr, envir, enclos): object 'a' not found"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#lexical-scoping",
    "href": "slides/01-foundations/03-programming/index.html#lexical-scoping",
    "title": "Programming in R",
    "section": "Lexical Scoping",
    "text": "Lexical Scoping\nIf an object is not defined within the function, or passed in as an argument, R looks for it in the parent environment where the function was defined\n\nx <- 1\ny <- 3\nf <- function(x){\n    x + y\n}\nf(x)\n\n[1] 4\n\nrm(y)\nf(x)\n\nError in f(x): object 'y' not found\n\n\nIt is safest (and best practice) to use arguments rather than depend on global variables!"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#return-values-single",
    "href": "slides/01-foundations/03-programming/index.html#return-values-single",
    "title": "Programming in R",
    "section": "Return Values (single)",
    "text": "Return Values (single)\nBy default, functions return the object created by the last line of code\n\nf <- function(x) {\n    x <- x + 1\n    log(x)\n}\n\nAlternatively return() can be used to terminate the function and return a given object\n\nf <- function(x) {\n    if (all(x > 0)) return(log(x))\n    x[x <= 0] <- 0.1\n    log(x)\n}"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#return-values-multiple",
    "href": "slides/01-foundations/03-programming/index.html#return-values-multiple",
    "title": "Programming in R",
    "section": "Return values (multiple)",
    "text": "Return values (multiple)\nMultiple objects can be returned in a list:\n\nmean_and_sd <- function(x) {\n  res_mean <- mean(x, na.rm = TRUE)\n  res_sd <- sd(x)\n  \n  list(mean = res_mean,\n       sd = res_sd)\n}\n\nx <- 1:3\nmean_and_sd(x)\n\n$mean\n[1] 2\n\n$sd\n[1] 1"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#your-turn-2",
    "href": "slides/01-foundations/03-programming/index.html#your-turn-2",
    "title": "Programming in R",
    "section": "Your turn!",
    "text": "Your turn!\nWrite your own function, variance, to compute the variance of a numeric vector:\n\\[\nVar(x) = \\frac{1}{n-1}\\sum_{i=1}^n(x_i - \\bar{x})^2\n\\]\nMake use of R’s built in vectorisation.\nTest it and compare your answer with the built-in var() function."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#your-turn-a-solution-1",
    "href": "slides/01-foundations/03-programming/index.html#your-turn-a-solution-1",
    "title": "Programming in R",
    "section": "Your turn! (a solution)",
    "text": "Your turn! (a solution)\n\nvariance <- function(x) {\n  1/(length(x) - 1) * sum((x - mean(x))^2)\n}"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#resources",
    "href": "slides/01-foundations/03-programming/index.html#resources",
    "title": "Programming in R",
    "section": "Resources",
    "text": "Resources\nMaterial (very largely) inspired by and remixed from:\n\nHeather Turner and Erlap Dogu’s R Programming slides (with permission)\n\nAdditionally:\n\nEfficient R, Chapter 3 by Colin Gillespie and Robin Lovelace\nR for Data Science, by Hadley Wickham and Garrett Grolemund, chapters on iteration and functions"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#license",
    "href": "slides/01-foundations/03-programming/index.html#license",
    "title": "Programming in R",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#unspecified-arguments",
    "href": "slides/01-foundations/03-programming/index.html#unspecified-arguments",
    "title": "Programming in R",
    "section": "Unspecified Arguments",
    "text": "Unspecified Arguments\n... or the ellipsis allow unspecified arguments to be passed to the function.\nThis device is used by functions that work with arbitrary numbers of objects, e.g. \n\nargs(sum)\n\nfunction (..., na.rm = FALSE) \nNULL\n\nsum(1, 4, 10, 2)\n\n[1] 17\n\n\nIt can also be used to pass on arguments to another function, e.g.\n\nt_statistic <- function(x, g, ...) {\n    t.test(x ~ g, ...)$stat\n}"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#using-...",
    "href": "slides/01-foundations/03-programming/index.html#using-...",
    "title": "Programming in R",
    "section": "Using ...",
    "text": "Using ...\nArguments passed to ... can be collected into a list for further analysis\n\nmeans <- function(...){\n    dots <- list(...)\n    vapply(dots, mean, numeric(1), na.rm = TRUE)\n}\nx <- 1\ny <- 2:3\nmeans(x, y)\n\n[1] 1.0 2.5\n\n\nSimilarly the objects could be concatenated using c()"
  },
  {
    "objectID": "slides/01-foundations/03-programming/index.html#side-effects",
    "href": "slides/01-foundations/03-programming/index.html#side-effects",
    "title": "Programming in R",
    "section": "Side Effects",
    "text": "Side Effects\nA side-effect is a change outside the function that occurs when the function is run, e.g.\n\nplot to the graphics window or other device\nprinting output to the console\nwrite data to a file\n\nA function can have many side-effects and a return value, but it is best practice to have a separate function for each task, e.g creating a plot or a table.\nWriting to file is usually best done outside a function."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "schedule",
    "section": "",
    "text": "Sessions will be held most Mondays in term time, from 10:00-11:30 in Term 1.\nPlease use the links in the sidebar to navigate to the full schedule for each term.\nNote that these are all subject to change."
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#random-numbers",
    "href": "slides/01-foundations/00-template/index.html#random-numbers",
    "title": "Simulation and Optimisation",
    "section": "Random numbers",
    "text": "Random numbers"
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#set.seed",
    "href": "slides/01-foundations/00-template/index.html#set.seed",
    "title": "Simulation and Optimisation",
    "section": "set.seed()",
    "text": "set.seed()"
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#sample",
    "href": "slides/01-foundations/00-template/index.html#sample",
    "title": "Simulation and Optimisation",
    "section": "sample()",
    "text": "sample()"
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#distributions-in-r",
    "href": "slides/01-foundations/00-template/index.html#distributions-in-r",
    "title": "Simulation and Optimisation",
    "section": "Distributions in R",
    "text": "Distributions in R"
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#random-samples-from-distributions",
    "href": "slides/01-foundations/00-template/index.html#random-samples-from-distributions",
    "title": "Simulation and Optimisation",
    "section": "Random samples from distributions",
    "text": "Random samples from distributions"
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#the-optimisation-problem",
    "href": "slides/01-foundations/00-template/index.html#the-optimisation-problem",
    "title": "Simulation and Optimisation",
    "section": "The optimisation problem",
    "text": "The optimisation problem\n\nGiven a function \\(f(x)\\), what value of \\(x\\) makes \\(f(x)\\) as small or large as possible?\nIn a statistical context, \\(x\\) will usually be the parameters of a model, and \\(f(x)\\) either the model likelihood to be maximised or some measure of discrepancy between data and predictions to be minimised.\nThe optimal set of parameters will give the best fit\nOnly need to consider small as \\(-f(x)\\) is large when \\(f(x)\\) is small.\nWe consider here general-purpose optimisers"
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#local-and-global-minima",
    "href": "slides/01-foundations/00-template/index.html#local-and-global-minima",
    "title": "Simulation and Optimisation",
    "section": "Local and Global Minima",
    "text": "Local and Global Minima\n\nThe (negative of the) likelihood for the General Linear Model (and that for many other linear models) is well-behaved: it has a single, global minimum.\nFor more complicated models there may be many local minima.\nFinding a global minimum is difficult, and not always important. Only if local minima are widely separated in parameter space are they likely to invalidate our conclusions.\nWe will concentrate on methods of finding local minima. Check for different local minima by altering the initial values, algorithm used, or other parameters of the fitting process."
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#univariate-optimisation",
    "href": "slides/01-foundations/00-template/index.html#univariate-optimisation",
    "title": "Simulation and Optimisation",
    "section": "Univariate Optimisation",
    "text": "Univariate Optimisation\noptimize (or optimise) finds a (possibly local) mimimum of a function in a specified interval with respect to its first argument.\n\nFunction to be minimised is the first argument to optimize\nCan pre-specify the function or include it in the command."
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#univariate-optimisation-example",
    "href": "slides/01-foundations/00-template/index.html#univariate-optimisation-example",
    "title": "Simulation and Optimisation",
    "section": "Univariate Optimisation: example",
    "text": "Univariate Optimisation: example\n\nf <- function(x, a) {\n  (x - a)^2\n}\n\nxmin <- optimize(f, interval = c(0, 1), a = 1/3)\n\n# or\n\nxmin <- optimize(function(x, a) {(x - a)^2}, \n                 interval = c(0, 1), a = 1/3)\n\nxmin\n\n$minimum\n[1] 0.3333333\n\n$objective\n[1] 0\n\n\nNote how the (fixed) parameter a is passed into f."
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#other-optimize-arguments",
    "href": "slides/01-foundations/00-template/index.html#other-optimize-arguments",
    "title": "Simulation and Optimisation",
    "section": "Other optimize() arguments",
    "text": "Other optimize() arguments\n\nAn interval within which to search must be specified, either by interval or by upper and lower\nTo maximise set maximum = TRUE\nAccuracy can be set using the tol argument\nNote the order of arguments: `optimize(f, interval, …, lower, upper, maximum, tol)\nThe ... can be named or unnamed and will be passed to f\nArguments after the ... must be specified by names.\noptimize returns a list with two items:\n\nminimum: the value of x at which f(x) is minimised\nobjective: the value of f(x) at x = minimum"
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#general-optimisation",
    "href": "slides/01-foundations/00-template/index.html#general-optimisation",
    "title": "Simulation and Optimisation",
    "section": "General Optimisation",
    "text": "General Optimisation\n\nIn more than one dimension the problem is harder.\nR has several different functions: most flexible is optim() which includes several different algorithms.\nAlgorithm of choice depends on how easy it is to calculate derivatives for the function. Usually better to supply a function to calculate derivatives, but may be unnecessary extra work.\nEnsure the problem is scaled so that unit change in any parameter gives approximately unit change in objective."
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#optim-methods",
    "href": "slides/01-foundations/00-template/index.html#optim-methods",
    "title": "Simulation and Optimisation",
    "section": "optim() methods",
    "text": "optim() methods\n\nNelder-MeadBFGSCG methodL-BFGS-BSANNBrent\n\n\n\nThe default method\nBasic idea: for a function with n parameters, choose a polygon with n+1 vertices. At each step, alter vertex with minimum f(x) to improve the objective function, by reflection, expansion or contraction\nDoes not use derivative information\nUseful for non-differentiable functions\nMay be rather slow\n\n\n\n\nA quasi-Newton method: builds up approximation to Hessian matrix from gradients at start and finish of steps\nUses the approximation to choose new search direction\nPerforms line search in this direction\nUpdate term for the Hessian approximation is due to Broyden, Fletcher, Goldfarb and Shanno (proposed separately by all four in 1970)\nUses derivative information, calculated either from a user-supplied function or by finite differences\nIf dimension is large, the matrix stored may be very large\n\n\n\n\nA conjugate gradient method: chooses successive search directions that are analogous to axes of an ellipse\nDoes not store a Hessian matrix\nThree different formulae for the search directions are implemented: Fletcher-Reeves, Polak-Ribiere or Beale-Sorenson\nLess robust than BFGS method\nUses derivative information, calculated either from a user-supplied function or by finite differences\n\n\n\n\nA limited memory version of BFGS\nDoes not store a Hessian matrix, only a limited number of update steps for it\nUses derivative information, calculated either from a user-supplied function or by finite differences\nCan restrict the solution to lie within a “box”, the only method of optim() that can do this\n\n\n\n\nA variant of simulated annealing A stochastic algorithm\nAccepts changes which increase the objective with positive probability (when minimising!)\nDoes not use derivative information\nCan be very slow to converge but may find a ‘good’ solution quickly\n\n\n\n\nAn interface to optimize()\nOnly for use with one dimensional problems\nIncluded for use inside other functions where only method can be specified, not the function to be used."
  },
  {
    "objectID": "slides/01-foundations/00-template/index.html#how-to-use-optim",
    "href": "slides/01-foundations/00-template/index.html#how-to-use-optim",
    "title": "Simulation and Optimisation",
    "section": "How to use optim()",
    "text": "How to use optim()\noptim(par, fn, gr=NULL, ..., method=c(\"Nelder-Mead\", \"BFGS\", \"CG\", \"L-BFGS-B\", \"SANN\", \"Brent\"), lower=-Inf, upper=Inf, control=list(), hessian=FALSE)\n\npar: starting values of the parameters fn: function to be optimised (supply as for optimize) gr: function to calculate the"
  }
]