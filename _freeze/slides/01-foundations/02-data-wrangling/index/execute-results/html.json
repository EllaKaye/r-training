{
  "hash": "f63168b9b613869b98cd4aca6a545395",
  "result": {
    "markdown": "---\ntitle: Data Types, Structures and Wrangling\nsubtitle: R Foundations course\nauthor: Ella Kaye | Department of Statistics | University of Warwick\ntitle-slide-attributes:\n  data-background-color: \"#552D62\"\ndate: \"October 17th, 2022\"\nformat: \n  revealjs:\n    theme: [default, ../../slides.scss]\n    slide-number: true\n    execute:\n      echo: true\n      code-overflow: wrap\ndraft: false\n---\n\n\n## Overview\n\n- Data types\n\n- Data structures\n\n- Data wrangling\n\n## Assigning in R\n\nThe assignment operator in R is `<-`\n\nWe can create objects in R and assign them names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1 + 3\n```\n:::\n\n\nThen we can inspect the objects we have created:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nAnd use them further:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\n## Naming objects\n\n::: {.panel-tabset}\n## forbidden\n\nObject names cannot:\n\n- start with a number\n\n- contain certain characters like `,` `-` `?`\n\n- contain a space (unless in ` `` `, but that is not best practice)\n\n## good\n\n- meaningful yet cconcise\n\n```\nday_one\nday_1\n```\n\n- consistent\n\n```\ni_use_snake_case\nother.people.use.periods\nevenOthersUseCamelCase\n```\n\n`snake_case` is preferred in R, especially in the tidyverse.\n\n## bad\n\n- not meaningful\n\n```\nfoo\nbar\n```\n\n- unnecessarily long or difficult to read\n\n```\nfirst_day_of_month\ndayone\n```\n\n- inconsistent\n\n:::\n\n\n\n\n## RStudio demo\n\nAssigning and environment pane.\n\nThere is an RStudio shortcut for `<-` which also puts spaces around it: <kbd>Alt</kbd>/<kbd title = \"option\">⌥</kbd> + <kbd title = \"minus\">-</kbd>\n\n# Data types and structures {background-color=\"#552D62\"}\n\n## Basic data types in R\n\n- character: `\"a\"`, `\"hello, world!\"`\n\n- double: `3`, `3.14`, `pi`\n\n- integer: `3L` (the `L` tells R to store this as an interger)\n\n- logical: `TRUE` and `FALSE`\n\n- complex: `3+2i`. N.B. need to write `1i` for $\\sqrt(-1)$.\n\n- raw: holds raw bytes (rarely used)\n\nN.B. double and integer types are both numeric\n\n## Special values\n\n- `NA`: The value `NA` is given to any data which R knows to be missing. It is not a character string, i.e. it is different to `\"NA\"`\n\n- `Inf`: Positive infinity, e.g. the result of dividing a non-zero number by zero\n\n- `NaN`: not a number, e.g. attempting to find the logarithm of a negative number\n\n- `NULL`: the null object. Often returned by expressions and functions whose value is undefined\n\n## Data structures\n\nData structures are the building blocks of R code.\n\nIn R, the main types of structures are\n\n- vectors\n\n- factors\n\n- matrices and arrays\n\n- lists\n\n- data frames\n\nFocus today on vectors, factors and data frames\n\n## Vectors\n\nA single number is a special case of a numeric vector. Vectors of length greater than one can be created using the concatenate function, `c`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 3, 6)\nfruits <- c(\"apple\", \"pear\")\n```\n:::\n\n\nThe elements of the vector must be of the same type: common types are numeric, character and logical.\n\n## Creating vectors\n\nThere are some useful shortcuts for certain types of vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nseq(from = 3, to = 5, by = 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.0 3.5 4.0 4.5 5.0\n```\n:::\n\n```{.r .cell-code}\nLETTERS\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n```\n:::\n:::\n\n\n## Subsetting vectors\n\nWe subset vectors using `[]`:\n\n- By position, starting at 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nletters[c(1, 5, 9, 15, 21)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"e\" \"i\" \"o\" \"u\"\n```\n:::\n:::\n\n\n- By logical vector \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(5, 3, 6, 1)\nx[c(TRUE, FALSE, TRUE, FALSE)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx[x > 4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 6\n```\n:::\n:::\n\n\n\n## Factors \n\nFactors are used to represent categorical data. They can be ordered or unordered.\n\nFactors are stored as integers, and have labels associated with these unique integers. While factors usually look (and often behave) like character vectors, they are actually integers under the hood, and you need to be careful when treating them like strings.\n\n## Factors\n\nOnce created, factors can only contain a pre-defined set values, known as levels. By default, R always sorts levels in alphabetical order. For instance, if you have a factor with 2 levels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruits <- factor(c(\"apple\", \"apple\", \"pear\"))\nfruits\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] apple apple pear \nLevels: apple pear\n```\n:::\n\n```{.r .cell-code}\nstr(fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Factor w/ 2 levels \"apple\",\"pear\": 1 1 2\n```\n:::\n:::\n\n\n## Data frames\n\nData sets are stored in R as *data frames*\n\nThese are structured as a list of objects, typically vectors, of the same length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nstr(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n```\n:::\n:::\n\n## tibbles\n\nFrom the [tibble](https://tibble.tidyverse.org){target=\"_blank\"} page:\n\n> A **tibble**, or `tbl_df`, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less (i.e. they don’t change variable names or types, and don’t do partial matching) and complain more (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced print() method which makes them easier to use with large datasets containing complex objects.\n\n## Creating data frames\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`my numbers` <- 1:3\nfruits <- c(\"apple\", \"pear\", \"orange\")\n```\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(`my numbers`, \n           fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  my.numbers fruits\n1          1  apple\n2          2   pear\n3          3 orange\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(`my numbers`, \n       fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  `my numbers` fruits\n         <int> <chr> \n1            1 apple \n2            2 pear  \n3            3 orange\n```\n:::\n:::\n\n:::\n::::\n\nSpot the differences!\n\n## Reading in a data frame\n\n## Import dataset (button)\n\n# Data wrangling {background-color=\"#552D62\"}\n\n## dplyr\n\nThe **dplyr** package (part of the tidyverse) provides the following key functions to operate on data frames:\n\n- filter()\n\n- arrange()\n\n- select()\n\n- mutate()\n\n- summarise()\n\nThey all take a data frame as their first argument. The subsequent arguments describe what to do with the data frame. The result is a new data frame.\n\n## `filter()`\n\nPicks rows based on values of observations.\n\n::: {.panel-tabset}\n## Example\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nfilter(penguins, species == \"Gentoo\", body_mass_g > 500)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 123 × 8\n   species island bill_length_mm bill_depth_mm flipper_len…¹ body_…² sex    year\n   <fct>   <fct>           <dbl>         <dbl>         <int>   <int> <fct> <int>\n 1 Gentoo  Biscoe           46.1          13.2           211    4500 fema…  2007\n 2 Gentoo  Biscoe           50            16.3           230    5700 male   2007\n 3 Gentoo  Biscoe           48.7          14.1           210    4450 fema…  2007\n 4 Gentoo  Biscoe           50            15.2           218    5700 male   2007\n 5 Gentoo  Biscoe           47.6          14.5           215    5400 male   2007\n 6 Gentoo  Biscoe           46.5          13.5           210    4550 fema…  2007\n 7 Gentoo  Biscoe           45.4          14.6           211    4800 fema…  2007\n 8 Gentoo  Biscoe           46.7          15.3           219    5200 male   2007\n 9 Gentoo  Biscoe           43.3          13.4           209    4400 fema…  2007\n10 Gentoo  Biscoe           46.8          15.4           215    5150 male   2007\n# … with 113 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n```\n:::\n:::\n\n\n## Notes\n- variable names are unquoted\n- use of `==` to test equality\n:::\n\n## `arrange()`\n\nChange the ordering of rows\n\n::: {.panel-tabset}\n## Example 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(penguins, flipper_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species   island    bill_length_mm bill_depth_mm flippe…¹ body_…² sex    year\n   <fct>     <fct>              <dbl>         <dbl>    <int>   <int> <fct> <int>\n 1 Adelie    Biscoe              37.9          18.6      172    3150 fema…  2007\n 2 Adelie    Biscoe              37.8          18.3      174    3400 fema…  2007\n 3 Adelie    Torgersen           40.2          17        176    3450 fema…  2009\n 4 Adelie    Dream               39.5          16.7      178    3250 fema…  2007\n 5 Adelie    Dream               37.2          18.1      178    3900 male   2007\n 6 Adelie    Dream               33.1          16.1      178    2900 fema…  2008\n 7 Chinstrap Dream               46.1          18.2      178    3250 fema…  2007\n 8 Adelie    Dream               37.5          18.9      179    2975 <NA>   2007\n 9 Adelie    Torgersen           37.8          17.3      180    3700 <NA>   2007\n10 Adelie    Biscoe              37.7          18.7      180    3600 male   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n```\n:::\n:::\n\n\n## Example 2\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(penguins, species, flipper_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Biscoe              37.9          18.6        172    3150 fema…  2007\n 2 Adelie  Biscoe              37.8          18.3        174    3400 fema…  2007\n 3 Adelie  Torgersen           40.2          17          176    3450 fema…  2009\n 4 Adelie  Dream               39.5          16.7        178    3250 fema…  2007\n 5 Adelie  Dream               37.2          18.1        178    3900 male   2007\n 6 Adelie  Dream               33.1          16.1        178    2900 fema…  2008\n 7 Adelie  Dream               37.5          18.9        179    2975 <NA>   2007\n 8 Adelie  Torgersen           37.8          17.3        180    3700 <NA>   2007\n 9 Adelie  Biscoe              37.7          18.7        180    3600 male   2007\n10 Adelie  Biscoe              38.8          17.2        180    3800 male   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n```\n:::\n:::\n\n\n## Example 3\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(penguins, desc(flipper_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_len…¹ body_…² sex    year\n   <fct>   <fct>           <dbl>         <dbl>         <int>   <int> <fct> <int>\n 1 Gentoo  Biscoe           54.3          15.7           231    5650 male   2008\n 2 Gentoo  Biscoe           50            16.3           230    5700 male   2007\n 3 Gentoo  Biscoe           59.6          17             230    6050 male   2007\n 4 Gentoo  Biscoe           49.8          16.8           230    5700 male   2008\n 5 Gentoo  Biscoe           48.6          16             230    5800 male   2008\n 6 Gentoo  Biscoe           52.1          17             230    5550 male   2009\n 7 Gentoo  Biscoe           51.5          16.3           230    5500 male   2009\n 8 Gentoo  Biscoe           55.1          16             230    5850 male   2009\n 9 Gentoo  Biscoe           49.5          16.2           229    5800 male   2008\n10 Gentoo  Biscoe           49.8          15.9           229    5950 male   2009\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n```\n:::\n:::\n\n:::\n\n## `select()`\n\nSelect variables in a dataset\n\n::: {.panel-tabset}\n## Example 1\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(penguins, bill_length_mm, bill_depth_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            <dbl>         <dbl>\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# … with 334 more rows\n```\n:::\n:::\n\n\n## Example 2\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(penguins, bill_length_mm:body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 4\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n            <dbl>         <dbl>             <int>       <int>\n 1           39.1          18.7               181        3750\n 2           39.5          17.4               186        3800\n 3           40.3          18                 195        3250\n 4           NA            NA                  NA          NA\n 5           36.7          19.3               193        3450\n 6           39.3          20.6               190        3650\n 7           38.9          17.8               181        3625\n 8           39.2          19.6               195        4675\n 9           34.1          18.1               193        3475\n10           42            20.2               190        4250\n# … with 334 more rows\n```\n:::\n:::\n\n\n## Example 3\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(penguins, starts_with(\"bill\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            <dbl>         <dbl>\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# … with 334 more rows\n```\n:::\n:::\n\n\n## Example 4\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(penguins, where(is.numeric))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 5\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n            <dbl>         <dbl>             <int>       <int> <int>\n 1           39.1          18.7               181        3750  2007\n 2           39.5          17.4               186        3800  2007\n 3           40.3          18                 195        3250  2007\n 4           NA            NA                  NA          NA  2007\n 5           36.7          19.3               193        3450  2007\n 6           39.3          20.6               190        3650  2007\n 7           38.9          17.8               181        3625  2007\n 8           39.2          19.6               195        4675  2007\n 9           34.1          18.1               193        3475  2007\n10           42            20.2               190        4250  2007\n# … with 334 more rows\n```\n:::\n:::\n\n\n## Note\nThere are several other selectors. See `?dplyr::select` or [online](https://dplyr.tidyverse.org/reference/select.html){target=\"_blank\"} for further details.\n:::\n\n## `mutate()`\n\nCreate and modify columns\n\n::: {.panel-tabset}\n\n## Example 1\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  select(bill_length_mm) |>\n  mutate(bill_length_mm_sq = bill_length_mm^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 2\n   bill_length_mm bill_length_mm_sq\n            <dbl>             <dbl>\n 1           39.1             1529.\n 2           39.5             1560.\n 3           40.3             1624.\n 4           NA                 NA \n 5           36.7             1347.\n 6           39.3             1544.\n 7           38.9             1513.\n 8           39.2             1537.\n 9           34.1             1163.\n10           42               1764 \n# … with 334 more rows\n```\n:::\n:::\n\n\n## Example 2\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n```\n:::\n:::\n\n\n\n## Example 3\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  select(bill_length_mm) |>\n  filter(!is.na(bill_length_mm)) |>\n  mutate(bill_length_mm_cumsum = cumsum(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 342 × 2\n   bill_length_mm bill_length_mm_cumsum\n            <dbl>                 <dbl>\n 1           39.1                  39.1\n 2           39.5                  78.6\n 3           40.3                 119. \n 4           36.7                 156. \n 5           39.3                 195. \n 6           38.9                 234. \n 7           39.2                 273  \n 8           34.1                 307. \n 9           42                   349. \n10           37.8                 387. \n# … with 332 more rows\n```\n:::\n:::\n\n\n\n:::\n\n\n## `summarise()`\n\n\n# End matter {background-color=\"#552D62\"}\n\n## Resources\n\nMaterial inspired by and remixed from:\n\n- \n\n## License\n\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/){target=\"_blank\"}).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}